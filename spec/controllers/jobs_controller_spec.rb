require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe JobsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Job. As you add validations to Job, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    ({name: "name", description: "describes a job", frequency: "weekly", estimated_price: 125.50, client_id: 1, route_id: 1})
  }

  let(:invalid_attributes) {
    ({name: "name", description: 1234, frequency: "weekly", estimated_price: "125.50", client_id: 1, route_id: 1})
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # JobsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #new" do
    it "creates a new job" do
      job = Job.create valid_attributes
      expect([Job.last]).to eq([job])
    end
  end

  describe "GET #show" do
    it "assigns the requested job as @job" do
      client = Client.create!(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")
      job = Job.new valid_attributes
      job.client = client
      job.save
      get :show, {:client_id => client.to_param, :id => job.to_param}, valid_session
      expect(assigns(:job)).to eq(job)
    end
  end

  describe "GET #edit" do
    it "assigns the requested job as @job" do
      client = Client.create!(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")
      job = Job.new valid_attributes
      job.client = client
      job.save
      get :edit, {:client_id => client.to_param, :id => job.to_param}, valid_session
      expect(assigns(:job)).to eq(job)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      Client.create!(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")
      it "creates a new Job" do
        expect {
          post :create, {:job => valid_attributes, client_id: Client.last.id}, valid_session
        }.to change(Job, :count).by(1)
      end

      it "assigns a newly created job as @job" do
        post :create, {:job => valid_attributes, client_id: Client.last.id}, valid_session
        expect(assigns(:job)).to be_a(Job)
        expect(assigns(:job)).to be_persisted
      end

      it "redirects to the created job" do
        post :create, {:job => valid_attributes, client_id: Client.last.id}, valid_session
        expect(response).to redirect_to(client_job_path(Client.last, Job.last))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved job as @job" do
        Client.create!(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")
        job = Job.new
        post :create, {:job => invalid_attributes, client_id: Client.last.id}, valid_session
        expect(Job.last).to_not be(job)
      end


    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        ({name: "name", description: "describes a new", frequency: "weekly", estimated_price: 125.50, route_id: 1})
      }

      let(:client) { Client.create(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")}

      it "updates the requested job" do
        job = Job.new valid_attributes
        job.client = client
        job.save
        put :update, {:client_id => client.to_param, :id => job.to_param, :job => new_attributes}, valid_session
        job.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested job as @job" do
        job = Job.new valid_attributes
        job.client = client
        job.save
        put :update, {:client_id => client.to_param,:id => job.to_param, :job => valid_attributes}, valid_session
        expect(assigns(:job)).to eq(job)
      end

      it "redirects to the job" do
        job = Job.new valid_attributes
        job.client = client
        job.save
        put :update, {:client_id => client.to_param,:id => job.to_param, :job => valid_attributes}, valid_session
        expect(response).to redirect_to(client_job_path(client, job))
      end
    end

    context "with invalid params" do
      let(:client) { Client.create(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")}
      let(:invalid) {
        ({name: "", description: 123, frequency: "weekly", estimated_price: 125.50, route_id: 1})
      }
      it "assigns the job as @job" do
        job = Job.new valid_attributes
        job.client = client
        job.save
        put :update, {:client_id => client.to_param,:id => job.to_param, :job => invalid_attributes}, valid_session
        expect(assigns(:job)).to eq(job)
      end

      it "re-renders the 'edit' template" do
        job = Job.new valid_attributes
        job.client = client
        job.save
        put :update, {:client_id => client.to_param, :id => job.to_param, :job => invalid}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
  let(:client) { Client.create(business_name: "business", contact_email: "john@doe.com", contact_phone: "1234567890", street_address: "123 ok", neighborhood: "ok", zip_code: "74055")}

    it "destroys the requested job" do
      job = Job.new valid_attributes
        job.client = client
        job.save
      expect {
        delete :destroy, {:client_id => client.to_param, :id => job.to_param}, valid_session
      }.to change(Job, :count).by(-1)
    end

    it "redirects to the jobs list" do
      job = Job.new valid_attributes
        job.client = client
        job.save
      delete :destroy, {:client_id => client.to_param, :id => job.to_param}, valid_session
      expect(response).to redirect_to(client_path(client))
    end
  end

end
